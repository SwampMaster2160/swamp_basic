use std::{error::Error, fmt::Display};

use num::BigInt;

use crate::{lexer::{type_restriction::TypeRestriction, separator::Separator, command::Command, operator::Operator}, scalar_value::{scalar_value::ScalarValue, integer::BasicInteger}};

#[derive(Debug, Clone)]
pub enum BasicError {
	CharEscapeInvalidChar(char),
	CharEscapeAtLineEnd,
	InvalidNonAlphabeticOperator(String),
	IndexOutOfBounds(BasicInteger, usize),
	TypeMismatch(ScalarValue, TypeRestriction),
	UnableToCast(ScalarValue, TypeRestriction),
	LineNotFound(BigInt),
	ExpectedStatement,
	ExpectedStatementEnd,
	FeatureNotYetSupported,
	InvalidValue(ScalarValue),
	TooManyClosingBrackets,
	TooManyOpeningBrackets,
	UnterminatedString,
	InvalidUtf8String,
	InvalidStatementOpcode(u8),
	InvalidExpressionOpcode(u8),
	InvalidLValueOpcode(u8),
	InvalidNullExpressionOpcode,
	ExpectedExpressionOpcodeButProgramEnd,
	ExpectedStatementOpcodeButProgramEnd,
	ExpectedLValueOpcodeButProgramEnd,
	InvalidNumericalLiteral(String),
	InvalidSeparator(Separator),
	ExpectedSeparator(Separator),
	NoOpeningBracketAfterFunction,
	OperatorUsedOnNothing,
	InvalidTypeRestriction(String),
	InvalidMultiCommand(Vec<Command>),
	ExpectedCommand,
	InvalidSingleCommand(Command),
	InvalidBinaryOperatorSymbol(Operator),
	InvalidUnaryOperatorSymbol(Operator),
	InvalidArgumentCount,
	InvalidSize(BasicInteger),
	InvalidNullStatementOpcode,
	DivisionByZero,
	ExpectedEqualsChar,
	UnexpectedLValueEndOpcode,
	ThenWithoutIf,
	InvalidRange(ScalarValue, ScalarValue),
	ExpectedLValue,
	ToStepNoForLoop,
	NextOnLValueWithoutLoop,
	NoProgramLines,
	InvalidNewline,
	LabelConflict(String),
	LabelNotAtLineStart,
	CommentInLineProgram,
	LabelInLineProgram,
	TooManyEntries,
	ParseError,
	ExpectedArrayLValue,
	ArraySizeTooLarge,
	ArrayOrFunctionDoesNotExist,
	ArrayIndexOutOfBounds,
	ReturnWhenNotInSubroutine,
	UnableToContinue,
	NoFilePath,
	UnableToCreateFile(String),
	UnableToSerializeProgram,
	UnableToWriteToFile,
	InvalidU8,
	InvalidSaveFormat(String),
	UnableToOpenFile(String),
	UnableToReadFileBytes,
	UnableToDeserializeProgram,
	MagicBytesDoNotMatch,
	MissingMagicBytes,
	UnexpectedEnd,
	InvalidFnFunction,
	FunctionDoesNotExist,
	FunctionAssignmentInLineProgram,
	TooManyReads,
}

impl Display for BasicError {
	fn fmt(&self, formatter: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		match self {
			Self::CharEscapeInvalidChar(chr) => write!(formatter, "Invalid character '{chr}' after '\\' escape character."),
			Self::CharEscapeAtLineEnd => write!(formatter, "'\\' string escape character at end of line."),
			Self::InvalidNonAlphabeticOperator(operator) => write!(formatter, "\"{operator}\" is an invalid non-alphabetic operator."),
			Self::IndexOutOfBounds(value, size) => write!(formatter, "Index {value} is out of bounds for indexee of size {size}."),
			Self::TypeMismatch(value, type_restriction) => write!(formatter, "Value {value} does not conform to type restriction of {type_restriction}."),
			Self::UnableToCast(value, type_restriction) => write!(formatter, "Unable to cast value {value} to conform to type restriction of {type_restriction}."),
			Self::LineNotFound(line) => write!(formatter, "The program does not have a line {line}."),
			Self::ExpectedStatement => write!(formatter, "Expected a statment."),
			Self::ExpectedStatementEnd => write!(formatter, "Expected a statment end."),
			Self::FeatureNotYetSupported => write!(formatter, "Feature not yet supported."),
			Self::TooManyClosingBrackets => write!(formatter, "Too many closing brackets."),
			Self::TooManyOpeningBrackets => write!(formatter, "Too many opening brackets."),
			Self::UnterminatedString => write!(formatter, "Unterminated string."),
			Self::InvalidUtf8String => write!(formatter, "Invalid byte sequence for a UTF-8 string."),
			Self::InvalidStatementOpcode(opcode) => write!(formatter, "Invalid command opcode: {:#04X}.", opcode),
			Self::InvalidExpressionOpcode(opcode) => write!(formatter, "Invalid function opcode: {:#04X}.", opcode),
			Self::InvalidLValueOpcode(opcode) => write!(formatter, "Invalid l-value opcode: {:#04X}.", opcode),
			Self::ExpectedExpressionOpcodeButProgramEnd => write!(formatter, "Expected expression opcode but bytecode ended."),
			Self::ExpectedStatementOpcodeButProgramEnd => write!(formatter, "Expected statement opcode but bytecode ended."),
			Self::ExpectedLValueOpcodeButProgramEnd => write!(formatter, "Expected l-value opcode but bytecode ended."),
			Self::InvalidNumericalLiteral(string) => write!(formatter, "Invalid numerical literal: {string}."),
			Self::InvalidSeparator(separator) => write!(formatter, "Invalid separator: {}", separator.get_symbol_char()),
			Self::NoOpeningBracketAfterFunction => write!(formatter, "No opening bracket immediately after function name and type."),
			Self::OperatorUsedOnNothing => write!(formatter, "Operator used on nothing."),
			Self::InvalidTypeRestriction(name) => write!(formatter, "Invalid type restriction: {name}."),
			Self::InvalidMultiCommand(commands) => {
				write!(formatter, "Invalid multi-command: {:?}", commands)
			}
			Self::ExpectedCommand => write!(formatter, "Expected command."),
			Self::InvalidSingleCommand(command) => write!(formatter, "Invalid single command: {:?}.", command),
			Self::InvalidBinaryOperatorSymbol(operator) => write!(formatter, "{:?} can only be used as a unary operator.", operator),
			Self::InvalidUnaryOperatorSymbol(operator) => write!(formatter, "{:?} can only be used as a binary operator.", operator),
			Self::InvalidArgumentCount => write!(formatter, "Invalid argument count."),
			Self::InvalidSize(size) => write!(formatter, "Invalid size: {size}."),
			Self::InvalidNullStatementOpcode => write!(formatter, "Invalid null statement opcode."),
			Self::DivisionByZero => write!(formatter, "Division by zero."),
			Self::ExpectedEqualsChar => write!(formatter, "Expected '=' character."),
			Self::UnexpectedLValueEndOpcode => write!(formatter, "Unexpected l-value end."),
			Self::ExpectedSeparator(separator) => write!(formatter, "Expected separator \"{}\"", separator.get_symbol_char()),
			Self::ThenWithoutIf => write!(formatter, "A \"then\" or \"else\" was executed without a \"if\" statement being executed since the program start or last gosub call."),
			Self::InvalidValue(value) => write!(formatter, "Invalid value: {value}."),
			Self::InvalidRange(start, end) => write!(formatter, "Invalid range: {start} to {end}."),
			Self::ExpectedLValue => write!(formatter, "Expected l-value."),
			Self::ToStepNoForLoop => write!(formatter, "A \"to\" or \"step\" was executed without a \"for\" loop being executed since the program start or last gosub call."),
			Self::NextOnLValueWithoutLoop => write!(formatter, "A \"next\" was executed on a l-value that is not bound to a for loop."),
			Self::NoProgramLines => write!(formatter, "No program lines."),
			Self::InvalidNewline => write!(formatter, "Invalid newline."),
			Self::InvalidNullExpressionOpcode => write!(formatter, "Invalid null expression opcode."),
			Self::LabelConflict(label) => write!(formatter, "Label \"{label}\" already exists in the program."),
			Self::LabelNotAtLineStart => write!(formatter, "Label must be at the start of the line."),
			Self::CommentInLineProgram => write!(formatter, "Comments must be in a numbered line."),
			Self::LabelInLineProgram => write!(formatter, "Labels must be in a numbered line."),
			Self::TooManyEntries => write!(formatter, "Too many entries."),
			Self::ParseError => write!(formatter, "Parse error."),
			Self::ExpectedArrayLValue => write!(formatter, "Expected array l-value."),
			Self::ArraySizeTooLarge => write!(formatter, "Array size too large."),
			Self::ArrayOrFunctionDoesNotExist => write!(formatter, "Array or function does not exist."),
			Self::ArrayIndexOutOfBounds => write!(formatter, "Index out of bounds."),
			Self::ReturnWhenNotInSubroutine => write!(formatter, "A \"return\" statement was executed when not in a subroutine."),
			Self::UnableToContinue => write!(formatter, "Unable to continue."),
			Self::NoFilePath => write!(formatter, "No file path."),
			Self::UnableToCreateFile(path) => write!(formatter, "Unable to create file with path \"{path}\"."),
			Self::UnableToSerializeProgram => write!(formatter, "Unable to serialize program."),
			Self::UnableToWriteToFile => write!(formatter, "Unable to write to file."),
			Self::InvalidU8 => write!(formatter, "Invalid u8 value."),
			Self::InvalidSaveFormat(format) => write!(formatter, "Invalid save format: {format}."),
			Self::UnableToOpenFile(path) => write!(formatter, "Unable to load file with path \"{path}\"."),
			Self::UnableToReadFileBytes => write!(formatter, "Unable to read file bytes."),
			Self::UnableToDeserializeProgram => write!(formatter, "Unable to deserialize program."),
			Self::MagicBytesDoNotMatch => write!(formatter, "Magic bytes do not match."),
			Self::MissingMagicBytes => write!(formatter, "Missing magic bytes."),
			Self::UnexpectedEnd => write!(formatter, "Unexpected end."),
			Self::InvalidFnFunction => write!(formatter, "Invalid fn function."),
			Self::FunctionDoesNotExist => write!(formatter, "Function does not exist."),
			Self::FunctionAssignmentInLineProgram => write!(formatter, "Function assignment in line program."),
			Self::TooManyReads => write!(formatter, "Too many reads for the amount of data constants defined."),
		}
	}
}

impl Error for BasicError {}